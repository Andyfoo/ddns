<?php

/**
 * @file
 *
 * Update Dynamic DNS provides from within Drupal
 *
 */

module_load_include('inc', 'ddns', 'ddns.services');

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function ddns_help($path, $arg) {
  // Switch based on where we're at in Drupal
  switch ($path) {
    case 'admin/help#ddns':
      // https://www.drupal.org/node/161085
      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }
      if (module_exists('markdown')) {
        $filters = module_invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_permission().
 *
 * Generates permissions for administration.
 */
function ddns_permission() {
  return array(
    'ddns admin' => array(
      'title' => t('Administer DDNS settings'),
      'description' => t('Perform configuration for DDNS setup.'),
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Generates menu items and permissions for administration.
 */
function ddns_menu() {
  // Create the menu
  $items = array();

  $items['admin/config/development/ddns'] = array(
    'title' => 'DDNS',
    'description' => 'Configuration for DDNS',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ddns_settings_form'),
    'access arguments' => array('ddns admin'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ddns.admin.inc',
  );

  return $items;
}

/**
 * Function to obtain external IP address from ipify.org service.
 */
function ddns_current_ip() {
  // file_get_contents can sometimes be slow
  // TODO: investigate a cURL based approach instead
  $ip = file_get_contents('https://api.ipify.org');
  // file_get_contents returns FALSE if it's unable to reach ipify
  if ($ip === FALSE) {
    $ip = 'UNKNOWN';
  };
  return $ip;
}

/**
 * Function to generate an array containing all services ready to update.
 */
function ddns_generate_service_urls() {
  $services = array();
  $ip = ddns_current_ip();
  foreach (ddns_services() as $provider => $url) {
    // The periods were replaced with underscores on the form so
    // we need to reference them the same way again.
    $pu = str_replace('.', '_', $provider);
    // Only generate a URL if the service is enabled
    if (variable_get('ddns_' . $pu . '_enabled') === 1) {
      // Prepare all the values
      $username = variable_get('ddns_' . $pu . '_username', '');
      $password = variable_get('ddns_' . $pu . '_password', '');
      $hostname = variable_get('ddns_' . $pu . '_hostname', '');

      // Try to replace username, password, domain, and IP
      $url = str_replace('[USERNAME]', $username, $url);
      $url = str_replace('[PASSWORD]', $password, $url);
      $url = str_replace('[DOMAIN]', $hostname, $url);
      $url = str_replace('[IP]', $ip, $url);

      // Add everything to an array to return
      $services[$provider] = $url;
    };
  };
  return $services;
}

/**
 * Implements hook_cron().
 *
 * Runs the update process for enabled DDNS services.
 */
function ddns_cron() {
  // Check to see if we're ready to run
  if (time() >= variable_get('ddns_nextrun', 0)) {
    $ua = variable_get('ddns_ua', 'Drupal DDNS - https://www.drupal.org/project/ddns');
    // Use cURL for each of the URLs generated
    foreach (ddns_generate_service_urls() as $provider => $url) {
      $curl_handle = curl_init();
      curl_setopt($curl_handle, CURLOPT_USERAGENT, $ua);
      //curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, FALSE);
      //curl_setopt($curl_handle, CURLOPT_SSL_VERIFYHOST, 2);
      curl_setopt($curl_handle, CURLOPT_CONNECTTIMEOUT, 2);
      curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($curl_handle, CURLOPT_URL, $url);
      // Update should be done, but we'll save the output to make sure
      $buffer = curl_exec($curl_handle);
      // If cURL had an error, inform the user
      if (curl_errno($curl_handle)) {
        $message = t('DDNS had an issue with cURL: @errno', array(
          '@errno' => curl_error($curl_handle),
        ));
        watchdog('ddns', $message, NULL, WATCHDOG_ERROR);
      }
      // We assume cURL worked, but need to make sure the service did
      else {
        // If the buffer is empty, we can assume the service is not working
        if (empty($buffer)) {
          $message = t('The provider, @provider, was unable to be reached.', array(
            '@provider' => $provider,
          ));
          watchdog('ddns', $message, NULL, WATCHDOG_WARNING);
        }
        // The buffer has content, we assume the service is working
        else {
          $message = t('The provider, @provider, was updated.', array(
            '@provider' => $provider,
          ));
          watchdog('ddns', $message, NULL, WATCHDOG_INFO);
        }
      };
      curl_close($curl_handle);
    };
  };
  // Get the interval set in minutes, default of 60
  $interval = variable_get('ddns_interval', 60) * 60;
  // Re-set the ddns_nextrun variable (by default an hour from now)
  variable_set('ddns_nextrun', time() + $interval);
}
